import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import {
  auth,
  projectStorage,
  db,
} from "../firebase/config";
import { useAuthContext } from "./useAuthContext";

export const useSignup = () => {
  const navigate = useNavigate();
  const [isCancelled, setIsCancelled] = useState(false);
  const [error, setError] = useState(null);
  const [isPending, setIsPending] = useState(false);
  const { dispatch } = useAuthContext();

  const updateThumbnail = () => {}

  const signup = (email, password, displayName, thumbnail) => {
    setError(null);
    setIsPending(true);

    auth
      .createUserWithEmailAndPassword(email, password)
      .then((res) => {
        if (!res) {
          throw new Error("Could not complete signup");
        }
        // after user created with uid upload user avatar:
        const uploadPath = `thumbnails/${res.user.uid}/${thumbnail.name}`;
        const img = projectStorage.ref(uploadPath).put(thumbnail);
        let result;
        result.img = img;
        result.res = res;
        return result;
      })
      .then((result) => {
        const imgUrl = result.img.ref.getDownloadURL();
        result.imgUrl = imgUrl;
        return result;
      })
      .then((result) => {
        // add displayName and photoUrl to user
        result.res.user.updateProfile({ displayName, photoURL: result.imgUrl });
        return result;
      })
      .then((result) => {
        // create a user document:
        db.collection("users").doc(result.res.user.uid).set({
          online: true,
          displayName,
          photoURL: result.imgUrl,
        });
        return result;
      })
      .then((result) => {
        if (!isCancelled) {
          console.log("Hello");
          setIsPending(false);
          setError(null);
        }
        // if (auth.currentUser !== null) {
        dispatch({ type: "LOGIN", payload: result.res.user });
        // }
      })
      .then(() => {
        db.currentUser.sendEmailVerification();
        // email verification sent
        console.log("email verification sent");
        // redirect to login page until email is verified
        navigate("/login");
      })
      .catch((err) => {
        if (!isCancelled) {
          setError(err.message);
          setIsPending(false);
        }
      });
  };

  useEffect(() => {
    return () => setIsCancelled(true);
  }, []);

  return { signup, error, isPending };
};
